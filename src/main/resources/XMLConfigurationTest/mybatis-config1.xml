<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- mybatis的主配置文件 -->
<configuration>

    <!--TODO 11111111111111111111111111111111111.属性（properties）-->
    <!--如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：-->
    <!--在 properties 元素体内指定的属性首先被读取。-->
    <!--然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。-->
    <!--最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。-->
    <properties resource="XMLConfigurationTest/config.properties">
        <property name="username" value="root"/>
        <property name="password" value="root1"/>
        <!-- 启用默认值特性==>":" -->
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        <!--提示 如果你已经使用 ":" 作为属性的键（如：db:username） ，
        或者你已经在 SQL 定义中使用 OGNL 表达式的三元运算符（如： ${tableName != null ? tableName : 'global_constants'}），
        你应该通过设置特定的属性来修改分隔键名和默认值的字符。例如：-->
        <!-- 修改默认值的分隔符 -->
        <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/>
    </properties>



    <!--TODO 22222222222222222222222222222222.设置（settings）-->
    <!--这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项的意图、默认值等。-->
    <!--<settings>-->
        <!--<setting name="cacheEnabled" value="true"/>-->
        <!--<setting name="lazyLoadingEnabled" value="true"/>-->
        <!--<setting name="multipleResultSetsEnabled" value="true"/>-->
        <!--<setting name="useColumnLabel" value="true"/>-->
        <!--<setting name="useGeneratedKeys" value="false"/>-->
        <!--<setting name="autoMappingBehavior" value="PARTIAL"/>-->
        <!--<setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>-->
        <!--<setting name="defaultExecutorType" value="SIMPLE"/>-->
        <!--<setting name="defaultStatementTimeout" value="25"/>-->
        <!--<setting name="defaultFetchSize" value="100"/>-->
        <!--<setting name="safeRowBoundsEnabled" value="false"/>-->
        <!--<setting name="mapUnderscoreToCamelCase" value="false"/>-->
        <!--<setting name="localCacheScope" value="SESSION"/>-->
        <!--<setting name="jdbcTypeForNull" value="OTHER"/>-->
        <!--<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>-->
    <!--</settings>-->
    <!--TODO 33333333333333333333333333333.类型别名（typeAliases）-->
    <!--类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。例如：-->
    <typeAliases>
        <!--当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。-->
        <!--<typeAlias alias="Author" type="domain.blog.Author"/>-->
        <!--<typeAlias alias="Blog" type="domain.blog.Blog"/>-->
        <!--<typeAlias alias="Comment" type="domain.blog.Comment"/>-->
        <!--<typeAlias alias="Post" type="domain.blog.Post"/>-->
        <!--<typeAlias alias="Section" type="domain.blog.Section"/>-->
        <!--<typeAlias alias="Tag" type="domain.blog.Tag"/>-->
        <!--也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：-->
        <package name="com.lege.officialcn.domain"/>
        <!--TODO:这个好像没有起作用-->
        <package name="com.lege.officialcn.dao"/>
        <!--每一个在包 com.lege.officialcn.domain 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。
        比如 com.lege.officialcn.domain.User 的别名为 user；若有注解，则别名为其注解值。见下面的例子：-->
        <!--@Alias("alilaUser")-->
        <!--public class User {-->
        <!--...-->
        <!--}-->
    </typeAliases>

    <!--类型处理器（typeHandlers）-->





    <!-- 配置环境 -->
    <environments default="mysql">
        <!-- 配置mysql的环境-->
        <environment id="mysql">
            <!-- 配置事务的类型-->
            <transactionManager type="JDBC"></transactionManager>
            <!-- 配置数据源（连接池） -->
            <dataSource type="POOLED">
                <!-- 配置连接数据库的4个基本信息 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <!-- 如果属性 'username' 没有被配置，'username' 属性的值将为 'ut_user' -->
                <!--对应上面properties配置中的1：启动默认值特性，2：修改默认值的分隔符-->
                <property name="username" value="${username?:root}"/>
                <property name="password" value="${password?:root}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 -->

    <!-- 1.使用相对于类路径的资源引用 -->
    <mappers>
        <mapper resource="officialMapper/IUserDao.xml"/>
        <mapper resource="officialMapper/TopicEntity.xml"/>
    </mappers>

    <!-- 2.使用映射器接口实现类的完全限定类名:TODO 需要是注解SQL -->
    <!--<mappers>-->
        <!--注意看com.lege.officialcn.dao.UserDao的实现-->
        <!--<mapper class="com.lege.officialcn.dao.UserDao"/>-->
        <!--<mapper class="com.lege.officialcn.dao.IUserDao"/>-->
        <!--<mapper class="com.lege.officialcn.dao.TopicEntity"/>-->
    <!--</mappers>-->

    <!-- 3.将包内的映射器接口实现全部注册为映射器 -->
    <!--<mappers>-->
        <!--<package name="com.lege.officialcn.dao"/>-->
    <!--</mappers>-->


    <!-- 使用完全限定资源定位符（URL） -->
    <!--<mappers>-->
        <!--<mapper url="file:///var/mappers/AuthorMapper.xml"/>-->
        <!--<mapper url="file:///var/mappers/BlogMapper.xml"/>-->
        <!--<mapper url="file:///var/mappers/PostMapper.xml"/>-->
    <!--</mappers>-->
</configuration>
